# Попробуем поработать с библиотекой datetime и ознакомиться с ее функционалом.
# Начнем с простого, для начала импортируйте библиотеку datetime (она встроена в python, поэтому устанавливать ее отдельно не нужно), 
# затем создайте объект date из модуля datetime, передав на вход три аргумента day=10, month=2, year=2022. 
# Запишите этот объект в переменную launch_date. 
import datetime

launch_date = datetime.date(day=10, month=2, year=2022)

# Поэкспериментируем с арифметикой дат. Прибавьте к объекту даты, созданному ранее, 42 дня. 
# Для этого сложите  ваш объект даты с объектом timedelta из datetime. 
# Запишите результат в переменную some_future.

some_future = launch_date + datetime.timedelta(days=42)

# В прошлом задании вы наверняка импортировали через import datetime, затем через точку обращались к нужным объектам. Это могло быть неудобно.
# Используя синтаксис from ... import ..., сделайте следующий код рабочим:
# datetime(month=3, day=8, year=2022) + timedelta(days=3, hours=5, minutes=6)
# Запишите  результат в переменную times

from datetime import date       # noqa: E402
from datetime import timedelta  # noqa: E402

times = date(month=3, day=8, year=2022) + timedelta(days=3, hours=5, minutes=6)


# В этом задании мы напишем и выполним свой первый Python-скрипт. 
# Задание будет длинным, потому что мы впервые воспользуемся консолью и впервые запустим python-скрипт. 
# Мы с вами сделаем шаг навстречу хорошим практикам разработки и настроим полноценный инструмент логирования — библиотеку loguru.
# А заодно научимся ставить сторонние библиотеки :)
# 1. Откройте консоль у себя на компьютере (powershell в Windows или другой терминал в Linux/macOS)
# и установите у себя на компьютере библиотеку под названием loguru. Не закрывайте консоль, она нам еще понадобится.
# 2. Библиотеку поставили, дальше надо написать код и выполнить его. Тут в игру вступают Python-скрипты. 
# Создайте у себя файл с названим logging_example.py. Для этого вы можете воспользоваться любым текстовым редактором — на первых порах нам хватит и этого. 
# Для Windows подойдет Блокнот (советуем Notepad++ поставить), для macOS можете использовать TextEdit.
# В файле напишите код, который импортирует из loguru объект logger и вызывает его функцию info, передав единственным аргументом строку "program started". 
# У вас получится файл с некоторыми командами Python. Сохраните его в какое-то место на диске.
# 3. Теперь пора запустить код. Для этого вернитесь в консоль, затем напишите python полный_путь_до_файла, где полный_путь_до_файла — это место, 
# куда вы сохранили свой код. Например, python C:\Users\Aleksei\logging_example.py для Windows, python /home/aleksei/logging_example.py для Linux и python /Users/Aleksei/logging_example.py для macOS.
# Если все получилось, то у вас в терминале должно было появиться красивое сообщение. 

# Представьте себе, что вы приходите на работу в IT-команду. Вам дают проект от коллеги-разработчика, и в нем вы находите скрипт по агрегации данных:
# import pandas as pd

# all_data = [1.7, 0.5, None]
# data_sum = pd.Series(all_data).sum(skipna=None)
# print(data_sum)
# Глядя на код, вы понимаете, что надо будет установить pandas. Вы не находите файла requirements.txt, но понимаете, что надо поставить pandas. 
# «Зачем все эти сложности с фиксацией зависимостей. Я его летом только в 2021 писал, там все работало!» 
# — сказал вам коллега, когда вы спросили его про точную версию pandas. Вы идете запускать скрипт.
# 1.	Создайте файл requirements.txt и напишите в него единственную зависимость pandas без фиксации версии.
# 2.	Установите все зависимости, указанные в файле requirements.txt, который вы только что создали. Должен установиться pandas последней версии. 
# На момент старта курса эта версия должна быть 1.4.0 и выше — убедитесь, что у вас именно новая версия pandas (> 1.4.0). 
# Чтобы точно установить актуальную версию, используйте команду pip install -U -r requirements.txt, в ней -U означает «обновить все, что можно». 
# Обратите внимание, что мы никак не фиксировали версию pandas, которая ставилась - pip поставил самую свежую, которая доступна для используемой версии Python.
# 3.	Запустите код коллеги. Для этого скопируйте его из этого сайта, вставьте в текстовый файл под названием aggregate_data.py 
# и запустите через python путь_до_скрипта. Например, если вы сохранили файл в домашней папке на Windows, то это будет python 
# C:\Users\my_name\aggregate_data.py, где my_name — имя пользователя, под которым вы сейчас сидите.
