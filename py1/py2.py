# Напишите функцию zip_, которая принимает на вход два списка и «сшивает» их следующим образом, например:
# Списки [1, 5, 3, 8, 35] и [2, 7, 9] превратятся в [(1, 2), (5, 7), (3, 9)], 
# т. е. сначала берутся первые элементы первого и второго списков и собираются в кортеж, 
# затем вторые элементы первого и второго списков и собираются в кортеж и т. д., пока не дошли до конца самого короткого списка. 
# На выходе функция должна возвращать (return) «сшитый» список. Вам понадобится использовать цикл.


def zip_(list1, list2):
    zipped_list = []
    for i in range(min(len(list1), len(list2))):
        zipped_list.append((list1[i],list2[i]))

    return zipped_list
# Demo
# print(zip_([1,2],[6,7,9]))


# Напишите функцию final_balance, 
# которая на вход принимает начальную сумму init_sum, процентную ставку interest_rate, количество лет years и округление round_num. 
# Функция должна возвращать сумму по истечении этого срока.
# Аргумент функции round_num должен задавать, сколько значащих чисел после запятой оставлять. 
# Так, при round_num = 2 сумма будет выводиться с точностью до копеек, при round_num = 0 - с точностью до рублей. 
# В случае отрицательного round_num округление будет грубее: round_num = -1 будет округлять до десятков рублей, round_num = -2 до сотен и т. д.
# Поставьте значение по умолчанию round_num, равное 2. Это соответствует округлению до копеек.

def final_balance(init_sum, interest_rate, years, round_num = 2):
    sum = init_sum
    for _ in range(years):
        sum += sum * interest_rate / 100
    return round(sum, round_num)
# Demo
# print(final_balance(100,20,2))

# Ваш коллега придумал свой способ «генерации» данных. 
# Для этого он предложил брать набор чисел, возводить их в куб, потом брать остаток от деления на 7 и прибавлять к этому изначальный массив.
# Коллега был очень увлечен этой идеей и написал алгоритм, 
# но он работает неправильно — коллега подсчитал на бумаге ожидаемый результат, и он не совпал с выводом программы.
# def math_task(data):
#     answer = []
#     # возводим в третью степень
#     for elem in data:
#         answer += [elem * 3]
#     # берем остаток от деления на 7
#     for i in range(len(answer)):
#         answer[i] = answer[i] % 5
#     # прибавляем к остатку изначальный массив
#     for i in range(len(answer)):
#         answer[i] = answer[i] + data[i]
#     # возвращаем результат
#     return answer

# print(math_task([1, 4, 5, 9]))

def math_task(data):
    answer = [elem ** 3 for elem in data]
    for i in range(len(answer)):
        answer[i] %= 7
        answer[i] += data[i]
    return answer
# print(math_task([1, 2, 3, 4]))

# Вынесите код печати массива в функцию print_array
def print_array(array):
    print(f'###\n{array}\n###')
# Demo
# print_array(math_task([1, 2, 3, 4]))

# Напишите функцию sum_as_ints, которая принимает на вход список из строк, пытается привести их к целому числу через int(element) и считает сумму. 
# Список может содержать любые данные, но если они не приводятся через int(element), то программа должна их отбросить.
# Вы можете попробовать выполнить int("hello"), int("3.14"), int("2,2") и увидеть, какие исключения выбрасывает программа. 
# После этого можно обработать эти исключения у себя в функции.

def sum_as_ints(int_list):
    sum = 0
    for element in int_list:
        try:
            sum += int(element)
        except ValueError:
            continue
    return sum
        
# Demo
# print(sum_as_ints(['-1','1', 'hi', '2', '3.14', '4']))

# Учтите, конструкция try/except замедляет программу! Не надо в нее оборачивать весь код.
# Более того, для обработки данных чаще всего try/except можно заменить на if/else. 
# Если вы можете обработать плохой сценарий в программе без использования try/except, обязательно пользуйтесь такой возможностью.

def sum_as_ints2(int_list):
    sum = 0
    for element in int_list:
        if element.isnumeric():
            sum += int(element)
        elif element[0] == '-' and element[1:].isnumeric():
            sum -= int(element[1:])
        else:
            continue
    return sum
# Demo
# print(sum_as_ints2(['-1','1', 'hi', '2', '3.14', '4']))

# В этом задании Вам понадобится написать функцию find_substr,  
# которая принимает на вход два аргумента: подстроку (любой длины) и строку, в которой нужно ее искать, 
# и возвращает кортеж, представляющий собой пару [start, stop) первой позиции, где найдено слово.
# Например:
# find_substr("мы", "Летом мы хотим отдыхать на море")
# Output:
# (6, 8) 
# find_substr("ма", "маленькая машина")
# Output:
# (0, 2)

def find_substr(s1, s2):
    start = s2.find(s1)
    return (start, start + len(s1))
# Demo
# print(find_substr("мы", "Летом мы хотим отдыхать на море"))
# print(find_substr("ма", "маленькая машина"))

# В этом задании вам потребуется написать функцию fifth_element, 
# которая берет каждый пятый элемент списка в обратном порядке, начиная с пятого с конца и возвращает.
# Не в качестве ответа на задачу, а для самопроверки, попробуйте использовать написанную вами функцию fifth_element для расшифровки следующего кода: 
# ['e',6,8,'A','>','^','S','$','R','C',6,'+','#',9,'/',1,'T','!','%','K',7,'-','O','*','<',2,'h',4,'g']

def fifth_element(list) -> list:
    return list[-5::-5]
# Demo
# print(fifth_element(['e',6,8,'A','>','^','S','$','R','C',6,'+','#',9,'/',1,'T','!','%','K',7,'-','O','*','<',2,'h',4,'g']))


# В этом задании потребуется написать функцию process_string, которая приводит строку[1:] к нижнему регистру и заменяет все слова 'intern' на 'junior'.
def process_string(string):
    result = string[1:].lower().replace('intern','junior')
    return result

# Demo
# print(process_string('IIntern reads a lot of books'))

# В этом задании необходимо написать функцию check_string, которая сначала проверят наличие лишних символов пробела слева и справа. 
# Если есть лишние пробелы, то тогда мы считаем строку неверной. 
# Затем проверяет, что только первое слово начинается с большой буквы, а остальные с маленькой, 
# и в конце проводит проверку, что последний символ последнего элемента является точкой.
def check_string(string):
    return not (string[0].isspace() or 
                string[-1].isspace() or 
                string != string.capitalize() or 
                not string.endswith('.'))


print(check_string('В этом году будет особенно теплое море.'))

print(check_string('В этом году будет особенно теплое Mоре.'))

print(check_string('В этом году будет особенно теплое море'))

print(check_string(' В этом году будет особенно теплое море'))
